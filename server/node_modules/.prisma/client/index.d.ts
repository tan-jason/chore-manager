
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  createdAt: Date
  updatedAt: Date
  name: string
  id: string
  password: string
  username: string
  token: string | null
}

/**
 * Model House
 * 
 */
export type House = {
  createdAt: Date
  updatedAt: Date
  houseName: string
  id: number
  ownerId: string | null
}

/**
 * Model HouseUser
 * 
 */
export type HouseUser = {
  userId: string
  houseId: number
  id: number
}

/**
 * Model Chore
 * 
 */
export type Chore = {
  id: number
  title: string
  createdAt: Date
  updatedAt: Date
  time: Date | null
  houseId: number | null
  userId: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.house`: Exposes CRUD operations for the **House** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Houses
    * const houses = await prisma.house.findMany()
    * ```
    */
  get house(): Prisma.HouseDelegate<GlobalReject>;

  /**
   * `prisma.houseUser`: Exposes CRUD operations for the **HouseUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HouseUsers
    * const houseUsers = await prisma.houseUser.findMany()
    * ```
    */
  get houseUser(): Prisma.HouseUserDelegate<GlobalReject>;

  /**
   * `prisma.chore`: Exposes CRUD operations for the **Chore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chores
    * const chores = await prisma.chore.findMany()
    * ```
    */
  get chore(): Prisma.ChoreDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    House: 'House',
    HouseUser: 'HouseUser',
    Chore: 'Chore'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    chores: number
    housesOwned: number
    houses: number
  }

  export type UserCountOutputTypeSelect = {
    chores?: boolean
    housesOwned?: boolean
    houses?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type HouseCountOutputType
   */


  export type HouseCountOutputType = {
    chores: number
    users: number
  }

  export type HouseCountOutputTypeSelect = {
    chores?: boolean
    users?: boolean
  }

  export type HouseCountOutputTypeGetPayload<S extends boolean | null | undefined | HouseCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HouseCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (HouseCountOutputTypeArgs)
    ? HouseCountOutputType 
    : S extends { select: any } & (HouseCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof HouseCountOutputType ? HouseCountOutputType[P] : never
  } 
      : HouseCountOutputType




  // Custom InputTypes

  /**
   * HouseCountOutputType without action
   */
  export type HouseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HouseCountOutputType
     */
    select?: HouseCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    id: string | null
    password: string | null
    username: string | null
    token: string | null
  }

  export type UserMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    id: string | null
    password: string | null
    username: string | null
    token: string | null
  }

  export type UserCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    name: number
    id: number
    password: number
    username: number
    token: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    name?: true
    id?: true
    password?: true
    username?: true
    token?: true
  }

  export type UserMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    name?: true
    id?: true
    password?: true
    username?: true
    token?: true
  }

  export type UserCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    name?: true
    id?: true
    password?: true
    username?: true
    token?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    name: string
    id: string
    password: string
    username: string
    token: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    id?: boolean
    password?: boolean
    username?: boolean
    token?: boolean
    chores?: boolean | User$choresArgs
    housesOwned?: boolean | User$housesOwnedArgs
    houses?: boolean | User$housesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    chores?: boolean | User$choresArgs
    housesOwned?: boolean | User$housesOwnedArgs
    houses?: boolean | User$housesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chores' ? Array < ChoreGetPayload<S['include'][P]>>  :
        P extends 'housesOwned' ? Array < HouseGetPayload<S['include'][P]>>  :
        P extends 'houses' ? Array < HouseUserGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chores' ? Array < ChoreGetPayload<S['select'][P]>>  :
        P extends 'housesOwned' ? Array < HouseGetPayload<S['select'][P]>>  :
        P extends 'houses' ? Array < HouseUserGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const userWithCreatedAtOnly = await prisma.user.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chores<T extends User$choresArgs= {}>(args?: Subset<T, User$choresArgs>): Prisma.PrismaPromise<Array<ChoreGetPayload<T>>| Null>;

    housesOwned<T extends User$housesOwnedArgs= {}>(args?: Subset<T, User$housesOwnedArgs>): Prisma.PrismaPromise<Array<HouseGetPayload<T>>| Null>;

    houses<T extends User$housesArgs= {}>(args?: Subset<T, User$housesArgs>): Prisma.PrismaPromise<Array<HouseUserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.chores
   */
  export type User$choresArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    where?: ChoreWhereInput
    orderBy?: Enumerable<ChoreOrderByWithRelationInput>
    cursor?: ChoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChoreScalarFieldEnum>
  }


  /**
   * User.housesOwned
   */
  export type User$housesOwnedArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    where?: HouseWhereInput
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    cursor?: HouseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HouseScalarFieldEnum>
  }


  /**
   * User.houses
   */
  export type User$housesArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    where?: HouseUserWhereInput
    orderBy?: Enumerable<HouseUserOrderByWithRelationInput>
    cursor?: HouseUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HouseUserScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model House
   */


  export type AggregateHouse = {
    _count: HouseCountAggregateOutputType | null
    _avg: HouseAvgAggregateOutputType | null
    _sum: HouseSumAggregateOutputType | null
    _min: HouseMinAggregateOutputType | null
    _max: HouseMaxAggregateOutputType | null
  }

  export type HouseAvgAggregateOutputType = {
    id: number | null
  }

  export type HouseSumAggregateOutputType = {
    id: number | null
  }

  export type HouseMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    houseName: string | null
    id: number | null
    ownerId: string | null
  }

  export type HouseMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    houseName: string | null
    id: number | null
    ownerId: string | null
  }

  export type HouseCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    houseName: number
    id: number
    ownerId: number
    _all: number
  }


  export type HouseAvgAggregateInputType = {
    id?: true
  }

  export type HouseSumAggregateInputType = {
    id?: true
  }

  export type HouseMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    houseName?: true
    id?: true
    ownerId?: true
  }

  export type HouseMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    houseName?: true
    id?: true
    ownerId?: true
  }

  export type HouseCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    houseName?: true
    id?: true
    ownerId?: true
    _all?: true
  }

  export type HouseAggregateArgs = {
    /**
     * Filter which House to aggregate.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Houses
    **/
    _count?: true | HouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseMaxAggregateInputType
  }

  export type GetHouseAggregateType<T extends HouseAggregateArgs> = {
        [P in keyof T & keyof AggregateHouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouse[P]>
      : GetScalarType<T[P], AggregateHouse[P]>
  }




  export type HouseGroupByArgs = {
    where?: HouseWhereInput
    orderBy?: Enumerable<HouseOrderByWithAggregationInput>
    by: HouseScalarFieldEnum[]
    having?: HouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseCountAggregateInputType | true
    _avg?: HouseAvgAggregateInputType
    _sum?: HouseSumAggregateInputType
    _min?: HouseMinAggregateInputType
    _max?: HouseMaxAggregateInputType
  }


  export type HouseGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    houseName: string
    id: number
    ownerId: string | null
    _count: HouseCountAggregateOutputType | null
    _avg: HouseAvgAggregateOutputType | null
    _sum: HouseSumAggregateOutputType | null
    _min: HouseMinAggregateOutputType | null
    _max: HouseMaxAggregateOutputType | null
  }

  type GetHouseGroupByPayload<T extends HouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseGroupByOutputType[P]>
            : GetScalarType<T[P], HouseGroupByOutputType[P]>
        }
      >
    >


  export type HouseSelect = {
    createdAt?: boolean
    updatedAt?: boolean
    houseName?: boolean
    id?: boolean
    ownerId?: boolean
    chores?: boolean | House$choresArgs
    houseOwner?: boolean | UserArgs
    users?: boolean | House$usersArgs
    _count?: boolean | HouseCountOutputTypeArgs
  }


  export type HouseInclude = {
    chores?: boolean | House$choresArgs
    houseOwner?: boolean | UserArgs
    users?: boolean | House$usersArgs
    _count?: boolean | HouseCountOutputTypeArgs
  }

  export type HouseGetPayload<S extends boolean | null | undefined | HouseArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? House :
    S extends undefined ? never :
    S extends { include: any } & (HouseArgs | HouseFindManyArgs)
    ? House  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chores' ? Array < ChoreGetPayload<S['include'][P]>>  :
        P extends 'houseOwner' ? UserGetPayload<S['include'][P]> | null :
        P extends 'users' ? Array < HouseUserGetPayload<S['include'][P]>>  :
        P extends '_count' ? HouseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HouseArgs | HouseFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chores' ? Array < ChoreGetPayload<S['select'][P]>>  :
        P extends 'houseOwner' ? UserGetPayload<S['select'][P]> | null :
        P extends 'users' ? Array < HouseUserGetPayload<S['select'][P]>>  :
        P extends '_count' ? HouseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof House ? House[P] : never
  } 
      : House


  type HouseCountArgs = 
    Omit<HouseFindManyArgs, 'select' | 'include'> & {
      select?: HouseCountAggregateInputType | true
    }

  export interface HouseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one House that matches the filter.
     * @param {HouseFindUniqueArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HouseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'House'> extends True ? Prisma__HouseClient<HouseGetPayload<T>> : Prisma__HouseClient<HouseGetPayload<T> | null, null>

    /**
     * Find one House that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseFindUniqueOrThrowArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HouseFindUniqueOrThrowArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Find the first House that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindFirstArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HouseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'House'> extends True ? Prisma__HouseClient<HouseGetPayload<T>> : Prisma__HouseClient<HouseGetPayload<T> | null, null>

    /**
     * Find the first House that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindFirstOrThrowArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HouseFindFirstOrThrowArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Find zero or more Houses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Houses
     * const houses = await prisma.house.findMany()
     * 
     * // Get first 10 Houses
     * const houses = await prisma.house.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const houseWithCreatedAtOnly = await prisma.house.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends HouseFindManyArgs>(
      args?: SelectSubset<T, HouseFindManyArgs>
    ): Prisma.PrismaPromise<Array<HouseGetPayload<T>>>

    /**
     * Create a House.
     * @param {HouseCreateArgs} args - Arguments to create a House.
     * @example
     * // Create one House
     * const House = await prisma.house.create({
     *   data: {
     *     // ... data to create a House
     *   }
     * })
     * 
    **/
    create<T extends HouseCreateArgs>(
      args: SelectSubset<T, HouseCreateArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Create many Houses.
     *     @param {HouseCreateManyArgs} args - Arguments to create many Houses.
     *     @example
     *     // Create many Houses
     *     const house = await prisma.house.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseCreateManyArgs>(
      args?: SelectSubset<T, HouseCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a House.
     * @param {HouseDeleteArgs} args - Arguments to delete one House.
     * @example
     * // Delete one House
     * const House = await prisma.house.delete({
     *   where: {
     *     // ... filter to delete one House
     *   }
     * })
     * 
    **/
    delete<T extends HouseDeleteArgs>(
      args: SelectSubset<T, HouseDeleteArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Update one House.
     * @param {HouseUpdateArgs} args - Arguments to update one House.
     * @example
     * // Update one House
     * const house = await prisma.house.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseUpdateArgs>(
      args: SelectSubset<T, HouseUpdateArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Delete zero or more Houses.
     * @param {HouseDeleteManyArgs} args - Arguments to filter Houses to delete.
     * @example
     * // Delete a few Houses
     * const { count } = await prisma.house.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseDeleteManyArgs>(
      args?: SelectSubset<T, HouseDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Houses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Houses
     * const house = await prisma.house.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseUpdateManyArgs>(
      args: SelectSubset<T, HouseUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one House.
     * @param {HouseUpsertArgs} args - Arguments to update or create a House.
     * @example
     * // Update or create a House
     * const house = await prisma.house.upsert({
     *   create: {
     *     // ... data to create a House
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the House we want to update
     *   }
     * })
    **/
    upsert<T extends HouseUpsertArgs>(
      args: SelectSubset<T, HouseUpsertArgs>
    ): Prisma__HouseClient<HouseGetPayload<T>>

    /**
     * Count the number of Houses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseCountArgs} args - Arguments to filter Houses to count.
     * @example
     * // Count the number of Houses
     * const count = await prisma.house.count({
     *   where: {
     *     // ... the filter for the Houses we want to count
     *   }
     * })
    **/
    count<T extends HouseCountArgs>(
      args?: Subset<T, HouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a House.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseAggregateArgs>(args: Subset<T, HouseAggregateArgs>): Prisma.PrismaPromise<GetHouseAggregateType<T>>

    /**
     * Group by House.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseGroupByArgs['orderBy'] }
        : { orderBy?: HouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for House.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HouseClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chores<T extends House$choresArgs= {}>(args?: Subset<T, House$choresArgs>): Prisma.PrismaPromise<Array<ChoreGetPayload<T>>| Null>;

    houseOwner<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    users<T extends House$usersArgs= {}>(args?: Subset<T, House$usersArgs>): Prisma.PrismaPromise<Array<HouseUserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * House base type for findUnique actions
   */
  export type HouseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which House to fetch.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House findUnique
   */
  export interface HouseFindUniqueArgs extends HouseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * House findUniqueOrThrow
   */
  export type HouseFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which House to fetch.
     */
    where: HouseWhereUniqueInput
  }


  /**
   * House base type for findFirst actions
   */
  export type HouseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which House to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Houses.
     */
    distinct?: Enumerable<HouseScalarFieldEnum>
  }

  /**
   * House findFirst
   */
  export interface HouseFindFirstArgs extends HouseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * House findFirstOrThrow
   */
  export type HouseFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which House to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Houses.
     */
    distinct?: Enumerable<HouseScalarFieldEnum>
  }


  /**
   * House findMany
   */
  export type HouseFindManyArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter, which Houses to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: Enumerable<HouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    distinct?: Enumerable<HouseScalarFieldEnum>
  }


  /**
   * House create
   */
  export type HouseCreateArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * The data needed to create a House.
     */
    data: XOR<HouseCreateInput, HouseUncheckedCreateInput>
  }


  /**
   * House createMany
   */
  export type HouseCreateManyArgs = {
    /**
     * The data used to create many Houses.
     */
    data: Enumerable<HouseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * House update
   */
  export type HouseUpdateArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * The data needed to update a House.
     */
    data: XOR<HouseUpdateInput, HouseUncheckedUpdateInput>
    /**
     * Choose, which House to update.
     */
    where: HouseWhereUniqueInput
  }


  /**
   * House updateMany
   */
  export type HouseUpdateManyArgs = {
    /**
     * The data used to update Houses.
     */
    data: XOR<HouseUpdateManyMutationInput, HouseUncheckedUpdateManyInput>
    /**
     * Filter which Houses to update
     */
    where?: HouseWhereInput
  }


  /**
   * House upsert
   */
  export type HouseUpsertArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * The filter to search for the House to update in case it exists.
     */
    where: HouseWhereUniqueInput
    /**
     * In case the House found by the `where` argument doesn't exist, create a new House with this data.
     */
    create: XOR<HouseCreateInput, HouseUncheckedCreateInput>
    /**
     * In case the House was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseUpdateInput, HouseUncheckedUpdateInput>
  }


  /**
   * House delete
   */
  export type HouseDeleteArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
    /**
     * Filter which House to delete.
     */
    where: HouseWhereUniqueInput
  }


  /**
   * House deleteMany
   */
  export type HouseDeleteManyArgs = {
    /**
     * Filter which Houses to delete
     */
    where?: HouseWhereInput
  }


  /**
   * House.chores
   */
  export type House$choresArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    where?: ChoreWhereInput
    orderBy?: Enumerable<ChoreOrderByWithRelationInput>
    cursor?: ChoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChoreScalarFieldEnum>
  }


  /**
   * House.users
   */
  export type House$usersArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    where?: HouseUserWhereInput
    orderBy?: Enumerable<HouseUserOrderByWithRelationInput>
    cursor?: HouseUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HouseUserScalarFieldEnum>
  }


  /**
   * House without action
   */
  export type HouseArgs = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseInclude | null
  }



  /**
   * Model HouseUser
   */


  export type AggregateHouseUser = {
    _count: HouseUserCountAggregateOutputType | null
    _avg: HouseUserAvgAggregateOutputType | null
    _sum: HouseUserSumAggregateOutputType | null
    _min: HouseUserMinAggregateOutputType | null
    _max: HouseUserMaxAggregateOutputType | null
  }

  export type HouseUserAvgAggregateOutputType = {
    houseId: number | null
    id: number | null
  }

  export type HouseUserSumAggregateOutputType = {
    houseId: number | null
    id: number | null
  }

  export type HouseUserMinAggregateOutputType = {
    userId: string | null
    houseId: number | null
    id: number | null
  }

  export type HouseUserMaxAggregateOutputType = {
    userId: string | null
    houseId: number | null
    id: number | null
  }

  export type HouseUserCountAggregateOutputType = {
    userId: number
    houseId: number
    id: number
    _all: number
  }


  export type HouseUserAvgAggregateInputType = {
    houseId?: true
    id?: true
  }

  export type HouseUserSumAggregateInputType = {
    houseId?: true
    id?: true
  }

  export type HouseUserMinAggregateInputType = {
    userId?: true
    houseId?: true
    id?: true
  }

  export type HouseUserMaxAggregateInputType = {
    userId?: true
    houseId?: true
    id?: true
  }

  export type HouseUserCountAggregateInputType = {
    userId?: true
    houseId?: true
    id?: true
    _all?: true
  }

  export type HouseUserAggregateArgs = {
    /**
     * Filter which HouseUser to aggregate.
     */
    where?: HouseUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseUsers to fetch.
     */
    orderBy?: Enumerable<HouseUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HouseUsers
    **/
    _count?: true | HouseUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseUserMaxAggregateInputType
  }

  export type GetHouseUserAggregateType<T extends HouseUserAggregateArgs> = {
        [P in keyof T & keyof AggregateHouseUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouseUser[P]>
      : GetScalarType<T[P], AggregateHouseUser[P]>
  }




  export type HouseUserGroupByArgs = {
    where?: HouseUserWhereInput
    orderBy?: Enumerable<HouseUserOrderByWithAggregationInput>
    by: HouseUserScalarFieldEnum[]
    having?: HouseUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseUserCountAggregateInputType | true
    _avg?: HouseUserAvgAggregateInputType
    _sum?: HouseUserSumAggregateInputType
    _min?: HouseUserMinAggregateInputType
    _max?: HouseUserMaxAggregateInputType
  }


  export type HouseUserGroupByOutputType = {
    userId: string
    houseId: number
    id: number
    _count: HouseUserCountAggregateOutputType | null
    _avg: HouseUserAvgAggregateOutputType | null
    _sum: HouseUserSumAggregateOutputType | null
    _min: HouseUserMinAggregateOutputType | null
    _max: HouseUserMaxAggregateOutputType | null
  }

  type GetHouseUserGroupByPayload<T extends HouseUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HouseUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseUserGroupByOutputType[P]>
            : GetScalarType<T[P], HouseUserGroupByOutputType[P]>
        }
      >
    >


  export type HouseUserSelect = {
    userId?: boolean
    houseId?: boolean
    id?: boolean
    house?: boolean | HouseArgs
    user?: boolean | UserArgs
  }


  export type HouseUserInclude = {
    house?: boolean | HouseArgs
    user?: boolean | UserArgs
  }

  export type HouseUserGetPayload<S extends boolean | null | undefined | HouseUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HouseUser :
    S extends undefined ? never :
    S extends { include: any } & (HouseUserArgs | HouseUserFindManyArgs)
    ? HouseUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'house' ? HouseGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HouseUserArgs | HouseUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'house' ? HouseGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof HouseUser ? HouseUser[P] : never
  } 
      : HouseUser


  type HouseUserCountArgs = 
    Omit<HouseUserFindManyArgs, 'select' | 'include'> & {
      select?: HouseUserCountAggregateInputType | true
    }

  export interface HouseUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one HouseUser that matches the filter.
     * @param {HouseUserFindUniqueArgs} args - Arguments to find a HouseUser
     * @example
     * // Get one HouseUser
     * const houseUser = await prisma.houseUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HouseUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'HouseUser'> extends True ? Prisma__HouseUserClient<HouseUserGetPayload<T>> : Prisma__HouseUserClient<HouseUserGetPayload<T> | null, null>

    /**
     * Find one HouseUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseUserFindUniqueOrThrowArgs} args - Arguments to find a HouseUser
     * @example
     * // Get one HouseUser
     * const houseUser = await prisma.houseUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HouseUserFindUniqueOrThrowArgs>
    ): Prisma__HouseUserClient<HouseUserGetPayload<T>>

    /**
     * Find the first HouseUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUserFindFirstArgs} args - Arguments to find a HouseUser
     * @example
     * // Get one HouseUser
     * const houseUser = await prisma.houseUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HouseUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'HouseUser'> extends True ? Prisma__HouseUserClient<HouseUserGetPayload<T>> : Prisma__HouseUserClient<HouseUserGetPayload<T> | null, null>

    /**
     * Find the first HouseUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUserFindFirstOrThrowArgs} args - Arguments to find a HouseUser
     * @example
     * // Get one HouseUser
     * const houseUser = await prisma.houseUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HouseUserFindFirstOrThrowArgs>
    ): Prisma__HouseUserClient<HouseUserGetPayload<T>>

    /**
     * Find zero or more HouseUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HouseUsers
     * const houseUsers = await prisma.houseUser.findMany()
     * 
     * // Get first 10 HouseUsers
     * const houseUsers = await prisma.houseUser.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const houseUserWithUserIdOnly = await prisma.houseUser.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends HouseUserFindManyArgs>(
      args?: SelectSubset<T, HouseUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<HouseUserGetPayload<T>>>

    /**
     * Create a HouseUser.
     * @param {HouseUserCreateArgs} args - Arguments to create a HouseUser.
     * @example
     * // Create one HouseUser
     * const HouseUser = await prisma.houseUser.create({
     *   data: {
     *     // ... data to create a HouseUser
     *   }
     * })
     * 
    **/
    create<T extends HouseUserCreateArgs>(
      args: SelectSubset<T, HouseUserCreateArgs>
    ): Prisma__HouseUserClient<HouseUserGetPayload<T>>

    /**
     * Create many HouseUsers.
     *     @param {HouseUserCreateManyArgs} args - Arguments to create many HouseUsers.
     *     @example
     *     // Create many HouseUsers
     *     const houseUser = await prisma.houseUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseUserCreateManyArgs>(
      args?: SelectSubset<T, HouseUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HouseUser.
     * @param {HouseUserDeleteArgs} args - Arguments to delete one HouseUser.
     * @example
     * // Delete one HouseUser
     * const HouseUser = await prisma.houseUser.delete({
     *   where: {
     *     // ... filter to delete one HouseUser
     *   }
     * })
     * 
    **/
    delete<T extends HouseUserDeleteArgs>(
      args: SelectSubset<T, HouseUserDeleteArgs>
    ): Prisma__HouseUserClient<HouseUserGetPayload<T>>

    /**
     * Update one HouseUser.
     * @param {HouseUserUpdateArgs} args - Arguments to update one HouseUser.
     * @example
     * // Update one HouseUser
     * const houseUser = await prisma.houseUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseUserUpdateArgs>(
      args: SelectSubset<T, HouseUserUpdateArgs>
    ): Prisma__HouseUserClient<HouseUserGetPayload<T>>

    /**
     * Delete zero or more HouseUsers.
     * @param {HouseUserDeleteManyArgs} args - Arguments to filter HouseUsers to delete.
     * @example
     * // Delete a few HouseUsers
     * const { count } = await prisma.houseUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseUserDeleteManyArgs>(
      args?: SelectSubset<T, HouseUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HouseUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HouseUsers
     * const houseUser = await prisma.houseUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseUserUpdateManyArgs>(
      args: SelectSubset<T, HouseUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HouseUser.
     * @param {HouseUserUpsertArgs} args - Arguments to update or create a HouseUser.
     * @example
     * // Update or create a HouseUser
     * const houseUser = await prisma.houseUser.upsert({
     *   create: {
     *     // ... data to create a HouseUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HouseUser we want to update
     *   }
     * })
    **/
    upsert<T extends HouseUserUpsertArgs>(
      args: SelectSubset<T, HouseUserUpsertArgs>
    ): Prisma__HouseUserClient<HouseUserGetPayload<T>>

    /**
     * Count the number of HouseUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUserCountArgs} args - Arguments to filter HouseUsers to count.
     * @example
     * // Count the number of HouseUsers
     * const count = await prisma.houseUser.count({
     *   where: {
     *     // ... the filter for the HouseUsers we want to count
     *   }
     * })
    **/
    count<T extends HouseUserCountArgs>(
      args?: Subset<T, HouseUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HouseUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseUserAggregateArgs>(args: Subset<T, HouseUserAggregateArgs>): Prisma.PrismaPromise<GetHouseUserAggregateType<T>>

    /**
     * Group by HouseUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseUserGroupByArgs['orderBy'] }
        : { orderBy?: HouseUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for HouseUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HouseUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    house<T extends HouseArgs= {}>(args?: Subset<T, HouseArgs>): Prisma__HouseClient<HouseGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * HouseUser base type for findUnique actions
   */
  export type HouseUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * Filter, which HouseUser to fetch.
     */
    where: HouseUserWhereUniqueInput
  }

  /**
   * HouseUser findUnique
   */
  export interface HouseUserFindUniqueArgs extends HouseUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HouseUser findUniqueOrThrow
   */
  export type HouseUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * Filter, which HouseUser to fetch.
     */
    where: HouseUserWhereUniqueInput
  }


  /**
   * HouseUser base type for findFirst actions
   */
  export type HouseUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * Filter, which HouseUser to fetch.
     */
    where?: HouseUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseUsers to fetch.
     */
    orderBy?: Enumerable<HouseUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseUsers.
     */
    cursor?: HouseUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseUsers.
     */
    distinct?: Enumerable<HouseUserScalarFieldEnum>
  }

  /**
   * HouseUser findFirst
   */
  export interface HouseUserFindFirstArgs extends HouseUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HouseUser findFirstOrThrow
   */
  export type HouseUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * Filter, which HouseUser to fetch.
     */
    where?: HouseUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseUsers to fetch.
     */
    orderBy?: Enumerable<HouseUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseUsers.
     */
    cursor?: HouseUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseUsers.
     */
    distinct?: Enumerable<HouseUserScalarFieldEnum>
  }


  /**
   * HouseUser findMany
   */
  export type HouseUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * Filter, which HouseUsers to fetch.
     */
    where?: HouseUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseUsers to fetch.
     */
    orderBy?: Enumerable<HouseUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HouseUsers.
     */
    cursor?: HouseUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseUsers.
     */
    skip?: number
    distinct?: Enumerable<HouseUserScalarFieldEnum>
  }


  /**
   * HouseUser create
   */
  export type HouseUserCreateArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * The data needed to create a HouseUser.
     */
    data: XOR<HouseUserCreateInput, HouseUserUncheckedCreateInput>
  }


  /**
   * HouseUser createMany
   */
  export type HouseUserCreateManyArgs = {
    /**
     * The data used to create many HouseUsers.
     */
    data: Enumerable<HouseUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * HouseUser update
   */
  export type HouseUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * The data needed to update a HouseUser.
     */
    data: XOR<HouseUserUpdateInput, HouseUserUncheckedUpdateInput>
    /**
     * Choose, which HouseUser to update.
     */
    where: HouseUserWhereUniqueInput
  }


  /**
   * HouseUser updateMany
   */
  export type HouseUserUpdateManyArgs = {
    /**
     * The data used to update HouseUsers.
     */
    data: XOR<HouseUserUpdateManyMutationInput, HouseUserUncheckedUpdateManyInput>
    /**
     * Filter which HouseUsers to update
     */
    where?: HouseUserWhereInput
  }


  /**
   * HouseUser upsert
   */
  export type HouseUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * The filter to search for the HouseUser to update in case it exists.
     */
    where: HouseUserWhereUniqueInput
    /**
     * In case the HouseUser found by the `where` argument doesn't exist, create a new HouseUser with this data.
     */
    create: XOR<HouseUserCreateInput, HouseUserUncheckedCreateInput>
    /**
     * In case the HouseUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseUserUpdateInput, HouseUserUncheckedUpdateInput>
  }


  /**
   * HouseUser delete
   */
  export type HouseUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
    /**
     * Filter which HouseUser to delete.
     */
    where: HouseUserWhereUniqueInput
  }


  /**
   * HouseUser deleteMany
   */
  export type HouseUserDeleteManyArgs = {
    /**
     * Filter which HouseUsers to delete
     */
    where?: HouseUserWhereInput
  }


  /**
   * HouseUser without action
   */
  export type HouseUserArgs = {
    /**
     * Select specific fields to fetch from the HouseUser
     */
    select?: HouseUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseUserInclude | null
  }



  /**
   * Model Chore
   */


  export type AggregateChore = {
    _count: ChoreCountAggregateOutputType | null
    _avg: ChoreAvgAggregateOutputType | null
    _sum: ChoreSumAggregateOutputType | null
    _min: ChoreMinAggregateOutputType | null
    _max: ChoreMaxAggregateOutputType | null
  }

  export type ChoreAvgAggregateOutputType = {
    id: number | null
    houseId: number | null
  }

  export type ChoreSumAggregateOutputType = {
    id: number | null
    houseId: number | null
  }

  export type ChoreMinAggregateOutputType = {
    id: number | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
    time: Date | null
    houseId: number | null
    userId: string | null
  }

  export type ChoreMaxAggregateOutputType = {
    id: number | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
    time: Date | null
    houseId: number | null
    userId: string | null
  }

  export type ChoreCountAggregateOutputType = {
    id: number
    title: number
    createdAt: number
    updatedAt: number
    time: number
    houseId: number
    userId: number
    _all: number
  }


  export type ChoreAvgAggregateInputType = {
    id?: true
    houseId?: true
  }

  export type ChoreSumAggregateInputType = {
    id?: true
    houseId?: true
  }

  export type ChoreMinAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    time?: true
    houseId?: true
    userId?: true
  }

  export type ChoreMaxAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    time?: true
    houseId?: true
    userId?: true
  }

  export type ChoreCountAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    time?: true
    houseId?: true
    userId?: true
    _all?: true
  }

  export type ChoreAggregateArgs = {
    /**
     * Filter which Chore to aggregate.
     */
    where?: ChoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chores to fetch.
     */
    orderBy?: Enumerable<ChoreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chores
    **/
    _count?: true | ChoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChoreMaxAggregateInputType
  }

  export type GetChoreAggregateType<T extends ChoreAggregateArgs> = {
        [P in keyof T & keyof AggregateChore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChore[P]>
      : GetScalarType<T[P], AggregateChore[P]>
  }




  export type ChoreGroupByArgs = {
    where?: ChoreWhereInput
    orderBy?: Enumerable<ChoreOrderByWithAggregationInput>
    by: ChoreScalarFieldEnum[]
    having?: ChoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChoreCountAggregateInputType | true
    _avg?: ChoreAvgAggregateInputType
    _sum?: ChoreSumAggregateInputType
    _min?: ChoreMinAggregateInputType
    _max?: ChoreMaxAggregateInputType
  }


  export type ChoreGroupByOutputType = {
    id: number
    title: string
    createdAt: Date
    updatedAt: Date
    time: Date | null
    houseId: number | null
    userId: string | null
    _count: ChoreCountAggregateOutputType | null
    _avg: ChoreAvgAggregateOutputType | null
    _sum: ChoreSumAggregateOutputType | null
    _min: ChoreMinAggregateOutputType | null
    _max: ChoreMaxAggregateOutputType | null
  }

  type GetChoreGroupByPayload<T extends ChoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChoreGroupByOutputType[P]>
            : GetScalarType<T[P], ChoreGroupByOutputType[P]>
        }
      >
    >


  export type ChoreSelect = {
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    time?: boolean
    houseId?: boolean
    userId?: boolean
    house?: boolean | HouseArgs
    user?: boolean | UserArgs
  }


  export type ChoreInclude = {
    house?: boolean | HouseArgs
    user?: boolean | UserArgs
  }

  export type ChoreGetPayload<S extends boolean | null | undefined | ChoreArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Chore :
    S extends undefined ? never :
    S extends { include: any } & (ChoreArgs | ChoreFindManyArgs)
    ? Chore  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'house' ? HouseGetPayload<S['include'][P]> | null :
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ChoreArgs | ChoreFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'house' ? HouseGetPayload<S['select'][P]> | null :
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Chore ? Chore[P] : never
  } 
      : Chore


  type ChoreCountArgs = 
    Omit<ChoreFindManyArgs, 'select' | 'include'> & {
      select?: ChoreCountAggregateInputType | true
    }

  export interface ChoreDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Chore that matches the filter.
     * @param {ChoreFindUniqueArgs} args - Arguments to find a Chore
     * @example
     * // Get one Chore
     * const chore = await prisma.chore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChoreFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChoreFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Chore'> extends True ? Prisma__ChoreClient<ChoreGetPayload<T>> : Prisma__ChoreClient<ChoreGetPayload<T> | null, null>

    /**
     * Find one Chore that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChoreFindUniqueOrThrowArgs} args - Arguments to find a Chore
     * @example
     * // Get one Chore
     * const chore = await prisma.chore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChoreFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChoreFindUniqueOrThrowArgs>
    ): Prisma__ChoreClient<ChoreGetPayload<T>>

    /**
     * Find the first Chore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChoreFindFirstArgs} args - Arguments to find a Chore
     * @example
     * // Get one Chore
     * const chore = await prisma.chore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChoreFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChoreFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Chore'> extends True ? Prisma__ChoreClient<ChoreGetPayload<T>> : Prisma__ChoreClient<ChoreGetPayload<T> | null, null>

    /**
     * Find the first Chore that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChoreFindFirstOrThrowArgs} args - Arguments to find a Chore
     * @example
     * // Get one Chore
     * const chore = await prisma.chore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChoreFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChoreFindFirstOrThrowArgs>
    ): Prisma__ChoreClient<ChoreGetPayload<T>>

    /**
     * Find zero or more Chores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChoreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chores
     * const chores = await prisma.chore.findMany()
     * 
     * // Get first 10 Chores
     * const chores = await prisma.chore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const choreWithIdOnly = await prisma.chore.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChoreFindManyArgs>(
      args?: SelectSubset<T, ChoreFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChoreGetPayload<T>>>

    /**
     * Create a Chore.
     * @param {ChoreCreateArgs} args - Arguments to create a Chore.
     * @example
     * // Create one Chore
     * const Chore = await prisma.chore.create({
     *   data: {
     *     // ... data to create a Chore
     *   }
     * })
     * 
    **/
    create<T extends ChoreCreateArgs>(
      args: SelectSubset<T, ChoreCreateArgs>
    ): Prisma__ChoreClient<ChoreGetPayload<T>>

    /**
     * Create many Chores.
     *     @param {ChoreCreateManyArgs} args - Arguments to create many Chores.
     *     @example
     *     // Create many Chores
     *     const chore = await prisma.chore.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChoreCreateManyArgs>(
      args?: SelectSubset<T, ChoreCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chore.
     * @param {ChoreDeleteArgs} args - Arguments to delete one Chore.
     * @example
     * // Delete one Chore
     * const Chore = await prisma.chore.delete({
     *   where: {
     *     // ... filter to delete one Chore
     *   }
     * })
     * 
    **/
    delete<T extends ChoreDeleteArgs>(
      args: SelectSubset<T, ChoreDeleteArgs>
    ): Prisma__ChoreClient<ChoreGetPayload<T>>

    /**
     * Update one Chore.
     * @param {ChoreUpdateArgs} args - Arguments to update one Chore.
     * @example
     * // Update one Chore
     * const chore = await prisma.chore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChoreUpdateArgs>(
      args: SelectSubset<T, ChoreUpdateArgs>
    ): Prisma__ChoreClient<ChoreGetPayload<T>>

    /**
     * Delete zero or more Chores.
     * @param {ChoreDeleteManyArgs} args - Arguments to filter Chores to delete.
     * @example
     * // Delete a few Chores
     * const { count } = await prisma.chore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChoreDeleteManyArgs>(
      args?: SelectSubset<T, ChoreDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chores
     * const chore = await prisma.chore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChoreUpdateManyArgs>(
      args: SelectSubset<T, ChoreUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chore.
     * @param {ChoreUpsertArgs} args - Arguments to update or create a Chore.
     * @example
     * // Update or create a Chore
     * const chore = await prisma.chore.upsert({
     *   create: {
     *     // ... data to create a Chore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chore we want to update
     *   }
     * })
    **/
    upsert<T extends ChoreUpsertArgs>(
      args: SelectSubset<T, ChoreUpsertArgs>
    ): Prisma__ChoreClient<ChoreGetPayload<T>>

    /**
     * Count the number of Chores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChoreCountArgs} args - Arguments to filter Chores to count.
     * @example
     * // Count the number of Chores
     * const count = await prisma.chore.count({
     *   where: {
     *     // ... the filter for the Chores we want to count
     *   }
     * })
    **/
    count<T extends ChoreCountArgs>(
      args?: Subset<T, ChoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChoreAggregateArgs>(args: Subset<T, ChoreAggregateArgs>): Prisma.PrismaPromise<GetChoreAggregateType<T>>

    /**
     * Group by Chore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChoreGroupByArgs['orderBy'] }
        : { orderBy?: ChoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Chore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChoreClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    house<T extends HouseArgs= {}>(args?: Subset<T, HouseArgs>): Prisma__HouseClient<HouseGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Chore base type for findUnique actions
   */
  export type ChoreFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * Filter, which Chore to fetch.
     */
    where: ChoreWhereUniqueInput
  }

  /**
   * Chore findUnique
   */
  export interface ChoreFindUniqueArgs extends ChoreFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chore findUniqueOrThrow
   */
  export type ChoreFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * Filter, which Chore to fetch.
     */
    where: ChoreWhereUniqueInput
  }


  /**
   * Chore base type for findFirst actions
   */
  export type ChoreFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * Filter, which Chore to fetch.
     */
    where?: ChoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chores to fetch.
     */
    orderBy?: Enumerable<ChoreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chores.
     */
    cursor?: ChoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chores.
     */
    distinct?: Enumerable<ChoreScalarFieldEnum>
  }

  /**
   * Chore findFirst
   */
  export interface ChoreFindFirstArgs extends ChoreFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chore findFirstOrThrow
   */
  export type ChoreFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * Filter, which Chore to fetch.
     */
    where?: ChoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chores to fetch.
     */
    orderBy?: Enumerable<ChoreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chores.
     */
    cursor?: ChoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chores.
     */
    distinct?: Enumerable<ChoreScalarFieldEnum>
  }


  /**
   * Chore findMany
   */
  export type ChoreFindManyArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * Filter, which Chores to fetch.
     */
    where?: ChoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chores to fetch.
     */
    orderBy?: Enumerable<ChoreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chores.
     */
    cursor?: ChoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chores.
     */
    skip?: number
    distinct?: Enumerable<ChoreScalarFieldEnum>
  }


  /**
   * Chore create
   */
  export type ChoreCreateArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * The data needed to create a Chore.
     */
    data: XOR<ChoreCreateInput, ChoreUncheckedCreateInput>
  }


  /**
   * Chore createMany
   */
  export type ChoreCreateManyArgs = {
    /**
     * The data used to create many Chores.
     */
    data: Enumerable<ChoreCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Chore update
   */
  export type ChoreUpdateArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * The data needed to update a Chore.
     */
    data: XOR<ChoreUpdateInput, ChoreUncheckedUpdateInput>
    /**
     * Choose, which Chore to update.
     */
    where: ChoreWhereUniqueInput
  }


  /**
   * Chore updateMany
   */
  export type ChoreUpdateManyArgs = {
    /**
     * The data used to update Chores.
     */
    data: XOR<ChoreUpdateManyMutationInput, ChoreUncheckedUpdateManyInput>
    /**
     * Filter which Chores to update
     */
    where?: ChoreWhereInput
  }


  /**
   * Chore upsert
   */
  export type ChoreUpsertArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * The filter to search for the Chore to update in case it exists.
     */
    where: ChoreWhereUniqueInput
    /**
     * In case the Chore found by the `where` argument doesn't exist, create a new Chore with this data.
     */
    create: XOR<ChoreCreateInput, ChoreUncheckedCreateInput>
    /**
     * In case the Chore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChoreUpdateInput, ChoreUncheckedUpdateInput>
  }


  /**
   * Chore delete
   */
  export type ChoreDeleteArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
    /**
     * Filter which Chore to delete.
     */
    where: ChoreWhereUniqueInput
  }


  /**
   * Chore deleteMany
   */
  export type ChoreDeleteManyArgs = {
    /**
     * Filter which Chores to delete
     */
    where?: ChoreWhereInput
  }


  /**
   * Chore without action
   */
  export type ChoreArgs = {
    /**
     * Select specific fields to fetch from the Chore
     */
    select?: ChoreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChoreInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ChoreScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    time: 'time',
    houseId: 'houseId',
    userId: 'userId'
  };

  export type ChoreScalarFieldEnum = (typeof ChoreScalarFieldEnum)[keyof typeof ChoreScalarFieldEnum]


  export const HouseScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    houseName: 'houseName',
    id: 'id',
    ownerId: 'ownerId'
  };

  export type HouseScalarFieldEnum = (typeof HouseScalarFieldEnum)[keyof typeof HouseScalarFieldEnum]


  export const HouseUserScalarFieldEnum: {
    userId: 'userId',
    houseId: 'houseId',
    id: 'id'
  };

  export type HouseUserScalarFieldEnum = (typeof HouseUserScalarFieldEnum)[keyof typeof HouseUserScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    id: 'id',
    password: 'password',
    username: 'username',
    token: 'token'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    id?: StringFilter | string
    password?: StringFilter | string
    username?: StringFilter | string
    token?: StringNullableFilter | string | null
    chores?: ChoreListRelationFilter
    housesOwned?: HouseListRelationFilter
    houses?: HouseUserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    id?: SortOrder
    password?: SortOrder
    username?: SortOrder
    token?: SortOrder
    chores?: ChoreOrderByRelationAggregateInput
    housesOwned?: HouseOrderByRelationAggregateInput
    houses?: HouseUserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    id?: SortOrder
    password?: SortOrder
    username?: SortOrder
    token?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    id?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    token?: StringNullableWithAggregatesFilter | string | null
  }

  export type HouseWhereInput = {
    AND?: Enumerable<HouseWhereInput>
    OR?: Enumerable<HouseWhereInput>
    NOT?: Enumerable<HouseWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    houseName?: StringFilter | string
    id?: IntFilter | number
    ownerId?: StringNullableFilter | string | null
    chores?: ChoreListRelationFilter
    houseOwner?: XOR<UserRelationFilter, UserWhereInput> | null
    users?: HouseUserListRelationFilter
  }

  export type HouseOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    houseName?: SortOrder
    id?: SortOrder
    ownerId?: SortOrder
    chores?: ChoreOrderByRelationAggregateInput
    houseOwner?: UserOrderByWithRelationInput
    users?: HouseUserOrderByRelationAggregateInput
  }

  export type HouseWhereUniqueInput = {
    id?: number
  }

  export type HouseOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    houseName?: SortOrder
    id?: SortOrder
    ownerId?: SortOrder
    _count?: HouseCountOrderByAggregateInput
    _avg?: HouseAvgOrderByAggregateInput
    _max?: HouseMaxOrderByAggregateInput
    _min?: HouseMinOrderByAggregateInput
    _sum?: HouseSumOrderByAggregateInput
  }

  export type HouseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HouseScalarWhereWithAggregatesInput>
    OR?: Enumerable<HouseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HouseScalarWhereWithAggregatesInput>
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    houseName?: StringWithAggregatesFilter | string
    id?: IntWithAggregatesFilter | number
    ownerId?: StringNullableWithAggregatesFilter | string | null
  }

  export type HouseUserWhereInput = {
    AND?: Enumerable<HouseUserWhereInput>
    OR?: Enumerable<HouseUserWhereInput>
    NOT?: Enumerable<HouseUserWhereInput>
    userId?: StringFilter | string
    houseId?: IntFilter | number
    id?: IntFilter | number
    house?: XOR<HouseRelationFilter, HouseWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type HouseUserOrderByWithRelationInput = {
    userId?: SortOrder
    houseId?: SortOrder
    id?: SortOrder
    house?: HouseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type HouseUserWhereUniqueInput = {
    userId_houseId?: HouseUserUserIdHouseIdCompoundUniqueInput
  }

  export type HouseUserOrderByWithAggregationInput = {
    userId?: SortOrder
    houseId?: SortOrder
    id?: SortOrder
    _count?: HouseUserCountOrderByAggregateInput
    _avg?: HouseUserAvgOrderByAggregateInput
    _max?: HouseUserMaxOrderByAggregateInput
    _min?: HouseUserMinOrderByAggregateInput
    _sum?: HouseUserSumOrderByAggregateInput
  }

  export type HouseUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HouseUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<HouseUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HouseUserScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    houseId?: IntWithAggregatesFilter | number
    id?: IntWithAggregatesFilter | number
  }

  export type ChoreWhereInput = {
    AND?: Enumerable<ChoreWhereInput>
    OR?: Enumerable<ChoreWhereInput>
    NOT?: Enumerable<ChoreWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    time?: DateTimeNullableFilter | Date | string | null
    houseId?: IntNullableFilter | number | null
    userId?: StringNullableFilter | string | null
    house?: XOR<HouseRelationFilter, HouseWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type ChoreOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    time?: SortOrder
    houseId?: SortOrder
    userId?: SortOrder
    house?: HouseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ChoreWhereUniqueInput = {
    id?: number
  }

  export type ChoreOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    time?: SortOrder
    houseId?: SortOrder
    userId?: SortOrder
    _count?: ChoreCountOrderByAggregateInput
    _avg?: ChoreAvgOrderByAggregateInput
    _max?: ChoreMaxOrderByAggregateInput
    _min?: ChoreMinOrderByAggregateInput
    _sum?: ChoreSumOrderByAggregateInput
  }

  export type ChoreScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChoreScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChoreScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChoreScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    time?: DateTimeNullableWithAggregatesFilter | Date | string | null
    houseId?: IntNullableWithAggregatesFilter | number | null
    userId?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
    chores?: ChoreCreateNestedManyWithoutUserInput
    housesOwned?: HouseCreateNestedManyWithoutHouseOwnerInput
    houses?: HouseUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
    chores?: ChoreUncheckedCreateNestedManyWithoutUserInput
    housesOwned?: HouseUncheckedCreateNestedManyWithoutHouseOwnerInput
    houses?: HouseUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    chores?: ChoreUpdateManyWithoutUserNestedInput
    housesOwned?: HouseUpdateManyWithoutHouseOwnerNestedInput
    houses?: HouseUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    chores?: ChoreUncheckedUpdateManyWithoutUserNestedInput
    housesOwned?: HouseUncheckedUpdateManyWithoutHouseOwnerNestedInput
    houses?: HouseUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HouseCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    chores?: ChoreCreateNestedManyWithoutHouseInput
    houseOwner?: UserCreateNestedOneWithoutHousesOwnedInput
    users?: HouseUserCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    id?: number
    ownerId?: string | null
    chores?: ChoreUncheckedCreateNestedManyWithoutHouseInput
    users?: HouseUserUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    chores?: ChoreUpdateManyWithoutHouseNestedInput
    houseOwner?: UserUpdateOneWithoutHousesOwnedNestedInput
    users?: HouseUserUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    chores?: ChoreUncheckedUpdateManyWithoutHouseNestedInput
    users?: HouseUserUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type HouseCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    id?: number
    ownerId?: string | null
  }

  export type HouseUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
  }

  export type HouseUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HouseUserCreateInput = {
    id?: number
    house: HouseCreateNestedOneWithoutUsersInput
    user: UserCreateNestedOneWithoutHousesInput
  }

  export type HouseUserUncheckedCreateInput = {
    userId: string
    houseId: number
    id?: number
  }

  export type HouseUserUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    house?: HouseUpdateOneRequiredWithoutUsersNestedInput
    user?: UserUpdateOneRequiredWithoutHousesNestedInput
  }

  export type HouseUserUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    houseId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type HouseUserCreateManyInput = {
    userId: string
    houseId: number
    id?: number
  }

  export type HouseUserUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type HouseUserUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    houseId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ChoreCreateInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    house?: HouseCreateNestedOneWithoutChoresInput
    user?: UserCreateNestedOneWithoutChoresInput
  }

  export type ChoreUncheckedCreateInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    houseId?: number | null
    userId?: string | null
  }

  export type ChoreUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    house?: HouseUpdateOneWithoutChoresNestedInput
    user?: UserUpdateOneWithoutChoresNestedInput
  }

  export type ChoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    houseId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChoreCreateManyInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    houseId?: number | null
    userId?: string | null
  }

  export type ChoreUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    houseId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type ChoreListRelationFilter = {
    every?: ChoreWhereInput
    some?: ChoreWhereInput
    none?: ChoreWhereInput
  }

  export type HouseListRelationFilter = {
    every?: HouseWhereInput
    some?: HouseWhereInput
    none?: HouseWhereInput
  }

  export type HouseUserListRelationFilter = {
    every?: HouseUserWhereInput
    some?: HouseUserWhereInput
    none?: HouseUserWhereInput
  }

  export type ChoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    id?: SortOrder
    password?: SortOrder
    username?: SortOrder
    token?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    id?: SortOrder
    password?: SortOrder
    username?: SortOrder
    token?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    id?: SortOrder
    password?: SortOrder
    username?: SortOrder
    token?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HouseCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    houseName?: SortOrder
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type HouseAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HouseMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    houseName?: SortOrder
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type HouseMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    houseName?: SortOrder
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type HouseSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type HouseRelationFilter = {
    is?: HouseWhereInput
    isNot?: HouseWhereInput
  }

  export type HouseUserUserIdHouseIdCompoundUniqueInput = {
    userId: string
    houseId: number
  }

  export type HouseUserCountOrderByAggregateInput = {
    userId?: SortOrder
    houseId?: SortOrder
    id?: SortOrder
  }

  export type HouseUserAvgOrderByAggregateInput = {
    houseId?: SortOrder
    id?: SortOrder
  }

  export type HouseUserMaxOrderByAggregateInput = {
    userId?: SortOrder
    houseId?: SortOrder
    id?: SortOrder
  }

  export type HouseUserMinOrderByAggregateInput = {
    userId?: SortOrder
    houseId?: SortOrder
    id?: SortOrder
  }

  export type HouseUserSumOrderByAggregateInput = {
    houseId?: SortOrder
    id?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ChoreCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    time?: SortOrder
    houseId?: SortOrder
    userId?: SortOrder
  }

  export type ChoreAvgOrderByAggregateInput = {
    id?: SortOrder
    houseId?: SortOrder
  }

  export type ChoreMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    time?: SortOrder
    houseId?: SortOrder
    userId?: SortOrder
  }

  export type ChoreMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    time?: SortOrder
    houseId?: SortOrder
    userId?: SortOrder
  }

  export type ChoreSumOrderByAggregateInput = {
    id?: SortOrder
    houseId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ChoreCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChoreCreateWithoutUserInput>, Enumerable<ChoreUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChoreCreateOrConnectWithoutUserInput>
    createMany?: ChoreCreateManyUserInputEnvelope
    connect?: Enumerable<ChoreWhereUniqueInput>
  }

  export type HouseCreateNestedManyWithoutHouseOwnerInput = {
    create?: XOR<Enumerable<HouseCreateWithoutHouseOwnerInput>, Enumerable<HouseUncheckedCreateWithoutHouseOwnerInput>>
    connectOrCreate?: Enumerable<HouseCreateOrConnectWithoutHouseOwnerInput>
    createMany?: HouseCreateManyHouseOwnerInputEnvelope
    connect?: Enumerable<HouseWhereUniqueInput>
  }

  export type HouseUserCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HouseUserCreateWithoutUserInput>, Enumerable<HouseUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseUserCreateOrConnectWithoutUserInput>
    createMany?: HouseUserCreateManyUserInputEnvelope
    connect?: Enumerable<HouseUserWhereUniqueInput>
  }

  export type ChoreUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChoreCreateWithoutUserInput>, Enumerable<ChoreUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChoreCreateOrConnectWithoutUserInput>
    createMany?: ChoreCreateManyUserInputEnvelope
    connect?: Enumerable<ChoreWhereUniqueInput>
  }

  export type HouseUncheckedCreateNestedManyWithoutHouseOwnerInput = {
    create?: XOR<Enumerable<HouseCreateWithoutHouseOwnerInput>, Enumerable<HouseUncheckedCreateWithoutHouseOwnerInput>>
    connectOrCreate?: Enumerable<HouseCreateOrConnectWithoutHouseOwnerInput>
    createMany?: HouseCreateManyHouseOwnerInputEnvelope
    connect?: Enumerable<HouseWhereUniqueInput>
  }

  export type HouseUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HouseUserCreateWithoutUserInput>, Enumerable<HouseUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseUserCreateOrConnectWithoutUserInput>
    createMany?: HouseUserCreateManyUserInputEnvelope
    connect?: Enumerable<HouseUserWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ChoreUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChoreCreateWithoutUserInput>, Enumerable<ChoreUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChoreCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChoreUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChoreCreateManyUserInputEnvelope
    set?: Enumerable<ChoreWhereUniqueInput>
    disconnect?: Enumerable<ChoreWhereUniqueInput>
    delete?: Enumerable<ChoreWhereUniqueInput>
    connect?: Enumerable<ChoreWhereUniqueInput>
    update?: Enumerable<ChoreUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChoreUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChoreScalarWhereInput>
  }

  export type HouseUpdateManyWithoutHouseOwnerNestedInput = {
    create?: XOR<Enumerable<HouseCreateWithoutHouseOwnerInput>, Enumerable<HouseUncheckedCreateWithoutHouseOwnerInput>>
    connectOrCreate?: Enumerable<HouseCreateOrConnectWithoutHouseOwnerInput>
    upsert?: Enumerable<HouseUpsertWithWhereUniqueWithoutHouseOwnerInput>
    createMany?: HouseCreateManyHouseOwnerInputEnvelope
    set?: Enumerable<HouseWhereUniqueInput>
    disconnect?: Enumerable<HouseWhereUniqueInput>
    delete?: Enumerable<HouseWhereUniqueInput>
    connect?: Enumerable<HouseWhereUniqueInput>
    update?: Enumerable<HouseUpdateWithWhereUniqueWithoutHouseOwnerInput>
    updateMany?: Enumerable<HouseUpdateManyWithWhereWithoutHouseOwnerInput>
    deleteMany?: Enumerable<HouseScalarWhereInput>
  }

  export type HouseUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HouseUserCreateWithoutUserInput>, Enumerable<HouseUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HouseUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HouseUserCreateManyUserInputEnvelope
    set?: Enumerable<HouseUserWhereUniqueInput>
    disconnect?: Enumerable<HouseUserWhereUniqueInput>
    delete?: Enumerable<HouseUserWhereUniqueInput>
    connect?: Enumerable<HouseUserWhereUniqueInput>
    update?: Enumerable<HouseUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HouseUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HouseUserScalarWhereInput>
  }

  export type ChoreUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChoreCreateWithoutUserInput>, Enumerable<ChoreUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChoreCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChoreUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChoreCreateManyUserInputEnvelope
    set?: Enumerable<ChoreWhereUniqueInput>
    disconnect?: Enumerable<ChoreWhereUniqueInput>
    delete?: Enumerable<ChoreWhereUniqueInput>
    connect?: Enumerable<ChoreWhereUniqueInput>
    update?: Enumerable<ChoreUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChoreUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChoreScalarWhereInput>
  }

  export type HouseUncheckedUpdateManyWithoutHouseOwnerNestedInput = {
    create?: XOR<Enumerable<HouseCreateWithoutHouseOwnerInput>, Enumerable<HouseUncheckedCreateWithoutHouseOwnerInput>>
    connectOrCreate?: Enumerable<HouseCreateOrConnectWithoutHouseOwnerInput>
    upsert?: Enumerable<HouseUpsertWithWhereUniqueWithoutHouseOwnerInput>
    createMany?: HouseCreateManyHouseOwnerInputEnvelope
    set?: Enumerable<HouseWhereUniqueInput>
    disconnect?: Enumerable<HouseWhereUniqueInput>
    delete?: Enumerable<HouseWhereUniqueInput>
    connect?: Enumerable<HouseWhereUniqueInput>
    update?: Enumerable<HouseUpdateWithWhereUniqueWithoutHouseOwnerInput>
    updateMany?: Enumerable<HouseUpdateManyWithWhereWithoutHouseOwnerInput>
    deleteMany?: Enumerable<HouseScalarWhereInput>
  }

  export type HouseUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HouseUserCreateWithoutUserInput>, Enumerable<HouseUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HouseUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HouseUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HouseUserCreateManyUserInputEnvelope
    set?: Enumerable<HouseUserWhereUniqueInput>
    disconnect?: Enumerable<HouseUserWhereUniqueInput>
    delete?: Enumerable<HouseUserWhereUniqueInput>
    connect?: Enumerable<HouseUserWhereUniqueInput>
    update?: Enumerable<HouseUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HouseUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HouseUserScalarWhereInput>
  }

  export type ChoreCreateNestedManyWithoutHouseInput = {
    create?: XOR<Enumerable<ChoreCreateWithoutHouseInput>, Enumerable<ChoreUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<ChoreCreateOrConnectWithoutHouseInput>
    createMany?: ChoreCreateManyHouseInputEnvelope
    connect?: Enumerable<ChoreWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutHousesOwnedInput = {
    create?: XOR<UserCreateWithoutHousesOwnedInput, UserUncheckedCreateWithoutHousesOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutHousesOwnedInput
    connect?: UserWhereUniqueInput
  }

  export type HouseUserCreateNestedManyWithoutHouseInput = {
    create?: XOR<Enumerable<HouseUserCreateWithoutHouseInput>, Enumerable<HouseUserUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<HouseUserCreateOrConnectWithoutHouseInput>
    createMany?: HouseUserCreateManyHouseInputEnvelope
    connect?: Enumerable<HouseUserWhereUniqueInput>
  }

  export type ChoreUncheckedCreateNestedManyWithoutHouseInput = {
    create?: XOR<Enumerable<ChoreCreateWithoutHouseInput>, Enumerable<ChoreUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<ChoreCreateOrConnectWithoutHouseInput>
    createMany?: ChoreCreateManyHouseInputEnvelope
    connect?: Enumerable<ChoreWhereUniqueInput>
  }

  export type HouseUserUncheckedCreateNestedManyWithoutHouseInput = {
    create?: XOR<Enumerable<HouseUserCreateWithoutHouseInput>, Enumerable<HouseUserUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<HouseUserCreateOrConnectWithoutHouseInput>
    createMany?: HouseUserCreateManyHouseInputEnvelope
    connect?: Enumerable<HouseUserWhereUniqueInput>
  }

  export type ChoreUpdateManyWithoutHouseNestedInput = {
    create?: XOR<Enumerable<ChoreCreateWithoutHouseInput>, Enumerable<ChoreUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<ChoreCreateOrConnectWithoutHouseInput>
    upsert?: Enumerable<ChoreUpsertWithWhereUniqueWithoutHouseInput>
    createMany?: ChoreCreateManyHouseInputEnvelope
    set?: Enumerable<ChoreWhereUniqueInput>
    disconnect?: Enumerable<ChoreWhereUniqueInput>
    delete?: Enumerable<ChoreWhereUniqueInput>
    connect?: Enumerable<ChoreWhereUniqueInput>
    update?: Enumerable<ChoreUpdateWithWhereUniqueWithoutHouseInput>
    updateMany?: Enumerable<ChoreUpdateManyWithWhereWithoutHouseInput>
    deleteMany?: Enumerable<ChoreScalarWhereInput>
  }

  export type UserUpdateOneWithoutHousesOwnedNestedInput = {
    create?: XOR<UserCreateWithoutHousesOwnedInput, UserUncheckedCreateWithoutHousesOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutHousesOwnedInput
    upsert?: UserUpsertWithoutHousesOwnedInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutHousesOwnedInput, UserUncheckedUpdateWithoutHousesOwnedInput>
  }

  export type HouseUserUpdateManyWithoutHouseNestedInput = {
    create?: XOR<Enumerable<HouseUserCreateWithoutHouseInput>, Enumerable<HouseUserUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<HouseUserCreateOrConnectWithoutHouseInput>
    upsert?: Enumerable<HouseUserUpsertWithWhereUniqueWithoutHouseInput>
    createMany?: HouseUserCreateManyHouseInputEnvelope
    set?: Enumerable<HouseUserWhereUniqueInput>
    disconnect?: Enumerable<HouseUserWhereUniqueInput>
    delete?: Enumerable<HouseUserWhereUniqueInput>
    connect?: Enumerable<HouseUserWhereUniqueInput>
    update?: Enumerable<HouseUserUpdateWithWhereUniqueWithoutHouseInput>
    updateMany?: Enumerable<HouseUserUpdateManyWithWhereWithoutHouseInput>
    deleteMany?: Enumerable<HouseUserScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChoreUncheckedUpdateManyWithoutHouseNestedInput = {
    create?: XOR<Enumerable<ChoreCreateWithoutHouseInput>, Enumerable<ChoreUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<ChoreCreateOrConnectWithoutHouseInput>
    upsert?: Enumerable<ChoreUpsertWithWhereUniqueWithoutHouseInput>
    createMany?: ChoreCreateManyHouseInputEnvelope
    set?: Enumerable<ChoreWhereUniqueInput>
    disconnect?: Enumerable<ChoreWhereUniqueInput>
    delete?: Enumerable<ChoreWhereUniqueInput>
    connect?: Enumerable<ChoreWhereUniqueInput>
    update?: Enumerable<ChoreUpdateWithWhereUniqueWithoutHouseInput>
    updateMany?: Enumerable<ChoreUpdateManyWithWhereWithoutHouseInput>
    deleteMany?: Enumerable<ChoreScalarWhereInput>
  }

  export type HouseUserUncheckedUpdateManyWithoutHouseNestedInput = {
    create?: XOR<Enumerable<HouseUserCreateWithoutHouseInput>, Enumerable<HouseUserUncheckedCreateWithoutHouseInput>>
    connectOrCreate?: Enumerable<HouseUserCreateOrConnectWithoutHouseInput>
    upsert?: Enumerable<HouseUserUpsertWithWhereUniqueWithoutHouseInput>
    createMany?: HouseUserCreateManyHouseInputEnvelope
    set?: Enumerable<HouseUserWhereUniqueInput>
    disconnect?: Enumerable<HouseUserWhereUniqueInput>
    delete?: Enumerable<HouseUserWhereUniqueInput>
    connect?: Enumerable<HouseUserWhereUniqueInput>
    update?: Enumerable<HouseUserUpdateWithWhereUniqueWithoutHouseInput>
    updateMany?: Enumerable<HouseUserUpdateManyWithWhereWithoutHouseInput>
    deleteMany?: Enumerable<HouseUserScalarWhereInput>
  }

  export type HouseCreateNestedOneWithoutUsersInput = {
    create?: XOR<HouseCreateWithoutUsersInput, HouseUncheckedCreateWithoutUsersInput>
    connectOrCreate?: HouseCreateOrConnectWithoutUsersInput
    connect?: HouseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutHousesInput = {
    create?: XOR<UserCreateWithoutHousesInput, UserUncheckedCreateWithoutHousesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHousesInput
    connect?: UserWhereUniqueInput
  }

  export type HouseUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<HouseCreateWithoutUsersInput, HouseUncheckedCreateWithoutUsersInput>
    connectOrCreate?: HouseCreateOrConnectWithoutUsersInput
    upsert?: HouseUpsertWithoutUsersInput
    connect?: HouseWhereUniqueInput
    update?: XOR<HouseUpdateWithoutUsersInput, HouseUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneRequiredWithoutHousesNestedInput = {
    create?: XOR<UserCreateWithoutHousesInput, UserUncheckedCreateWithoutHousesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHousesInput
    upsert?: UserUpsertWithoutHousesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutHousesInput, UserUncheckedUpdateWithoutHousesInput>
  }

  export type HouseCreateNestedOneWithoutChoresInput = {
    create?: XOR<HouseCreateWithoutChoresInput, HouseUncheckedCreateWithoutChoresInput>
    connectOrCreate?: HouseCreateOrConnectWithoutChoresInput
    connect?: HouseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChoresInput = {
    create?: XOR<UserCreateWithoutChoresInput, UserUncheckedCreateWithoutChoresInput>
    connectOrCreate?: UserCreateOrConnectWithoutChoresInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type HouseUpdateOneWithoutChoresNestedInput = {
    create?: XOR<HouseCreateWithoutChoresInput, HouseUncheckedCreateWithoutChoresInput>
    connectOrCreate?: HouseCreateOrConnectWithoutChoresInput
    upsert?: HouseUpsertWithoutChoresInput
    disconnect?: boolean
    delete?: boolean
    connect?: HouseWhereUniqueInput
    update?: XOR<HouseUpdateWithoutChoresInput, HouseUncheckedUpdateWithoutChoresInput>
  }

  export type UserUpdateOneWithoutChoresNestedInput = {
    create?: XOR<UserCreateWithoutChoresInput, UserUncheckedCreateWithoutChoresInput>
    connectOrCreate?: UserCreateOrConnectWithoutChoresInput
    upsert?: UserUpsertWithoutChoresInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChoresInput, UserUncheckedUpdateWithoutChoresInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type ChoreCreateWithoutUserInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    house?: HouseCreateNestedOneWithoutChoresInput
  }

  export type ChoreUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    houseId?: number | null
  }

  export type ChoreCreateOrConnectWithoutUserInput = {
    where: ChoreWhereUniqueInput
    create: XOR<ChoreCreateWithoutUserInput, ChoreUncheckedCreateWithoutUserInput>
  }

  export type ChoreCreateManyUserInputEnvelope = {
    data: Enumerable<ChoreCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type HouseCreateWithoutHouseOwnerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    chores?: ChoreCreateNestedManyWithoutHouseInput
    users?: HouseUserCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutHouseOwnerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    id?: number
    chores?: ChoreUncheckedCreateNestedManyWithoutHouseInput
    users?: HouseUserUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutHouseOwnerInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutHouseOwnerInput, HouseUncheckedCreateWithoutHouseOwnerInput>
  }

  export type HouseCreateManyHouseOwnerInputEnvelope = {
    data: Enumerable<HouseCreateManyHouseOwnerInput>
    skipDuplicates?: boolean
  }

  export type HouseUserCreateWithoutUserInput = {
    id?: number
    house: HouseCreateNestedOneWithoutUsersInput
  }

  export type HouseUserUncheckedCreateWithoutUserInput = {
    houseId: number
    id?: number
  }

  export type HouseUserCreateOrConnectWithoutUserInput = {
    where: HouseUserWhereUniqueInput
    create: XOR<HouseUserCreateWithoutUserInput, HouseUserUncheckedCreateWithoutUserInput>
  }

  export type HouseUserCreateManyUserInputEnvelope = {
    data: Enumerable<HouseUserCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ChoreUpsertWithWhereUniqueWithoutUserInput = {
    where: ChoreWhereUniqueInput
    update: XOR<ChoreUpdateWithoutUserInput, ChoreUncheckedUpdateWithoutUserInput>
    create: XOR<ChoreCreateWithoutUserInput, ChoreUncheckedCreateWithoutUserInput>
  }

  export type ChoreUpdateWithWhereUniqueWithoutUserInput = {
    where: ChoreWhereUniqueInput
    data: XOR<ChoreUpdateWithoutUserInput, ChoreUncheckedUpdateWithoutUserInput>
  }

  export type ChoreUpdateManyWithWhereWithoutUserInput = {
    where: ChoreScalarWhereInput
    data: XOR<ChoreUpdateManyMutationInput, ChoreUncheckedUpdateManyWithoutChoresInput>
  }

  export type ChoreScalarWhereInput = {
    AND?: Enumerable<ChoreScalarWhereInput>
    OR?: Enumerable<ChoreScalarWhereInput>
    NOT?: Enumerable<ChoreScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    time?: DateTimeNullableFilter | Date | string | null
    houseId?: IntNullableFilter | number | null
    userId?: StringNullableFilter | string | null
  }

  export type HouseUpsertWithWhereUniqueWithoutHouseOwnerInput = {
    where: HouseWhereUniqueInput
    update: XOR<HouseUpdateWithoutHouseOwnerInput, HouseUncheckedUpdateWithoutHouseOwnerInput>
    create: XOR<HouseCreateWithoutHouseOwnerInput, HouseUncheckedCreateWithoutHouseOwnerInput>
  }

  export type HouseUpdateWithWhereUniqueWithoutHouseOwnerInput = {
    where: HouseWhereUniqueInput
    data: XOR<HouseUpdateWithoutHouseOwnerInput, HouseUncheckedUpdateWithoutHouseOwnerInput>
  }

  export type HouseUpdateManyWithWhereWithoutHouseOwnerInput = {
    where: HouseScalarWhereInput
    data: XOR<HouseUpdateManyMutationInput, HouseUncheckedUpdateManyWithoutHousesOwnedInput>
  }

  export type HouseScalarWhereInput = {
    AND?: Enumerable<HouseScalarWhereInput>
    OR?: Enumerable<HouseScalarWhereInput>
    NOT?: Enumerable<HouseScalarWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    houseName?: StringFilter | string
    id?: IntFilter | number
    ownerId?: StringNullableFilter | string | null
  }

  export type HouseUserUpsertWithWhereUniqueWithoutUserInput = {
    where: HouseUserWhereUniqueInput
    update: XOR<HouseUserUpdateWithoutUserInput, HouseUserUncheckedUpdateWithoutUserInput>
    create: XOR<HouseUserCreateWithoutUserInput, HouseUserUncheckedCreateWithoutUserInput>
  }

  export type HouseUserUpdateWithWhereUniqueWithoutUserInput = {
    where: HouseUserWhereUniqueInput
    data: XOR<HouseUserUpdateWithoutUserInput, HouseUserUncheckedUpdateWithoutUserInput>
  }

  export type HouseUserUpdateManyWithWhereWithoutUserInput = {
    where: HouseUserScalarWhereInput
    data: XOR<HouseUserUpdateManyMutationInput, HouseUserUncheckedUpdateManyWithoutHousesInput>
  }

  export type HouseUserScalarWhereInput = {
    AND?: Enumerable<HouseUserScalarWhereInput>
    OR?: Enumerable<HouseUserScalarWhereInput>
    NOT?: Enumerable<HouseUserScalarWhereInput>
    userId?: StringFilter | string
    houseId?: IntFilter | number
    id?: IntFilter | number
  }

  export type ChoreCreateWithoutHouseInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    user?: UserCreateNestedOneWithoutChoresInput
  }

  export type ChoreUncheckedCreateWithoutHouseInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    userId?: string | null
  }

  export type ChoreCreateOrConnectWithoutHouseInput = {
    where: ChoreWhereUniqueInput
    create: XOR<ChoreCreateWithoutHouseInput, ChoreUncheckedCreateWithoutHouseInput>
  }

  export type ChoreCreateManyHouseInputEnvelope = {
    data: Enumerable<ChoreCreateManyHouseInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutHousesOwnedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
    chores?: ChoreCreateNestedManyWithoutUserInput
    houses?: HouseUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHousesOwnedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
    chores?: ChoreUncheckedCreateNestedManyWithoutUserInput
    houses?: HouseUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHousesOwnedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHousesOwnedInput, UserUncheckedCreateWithoutHousesOwnedInput>
  }

  export type HouseUserCreateWithoutHouseInput = {
    id?: number
    user: UserCreateNestedOneWithoutHousesInput
  }

  export type HouseUserUncheckedCreateWithoutHouseInput = {
    userId: string
    id?: number
  }

  export type HouseUserCreateOrConnectWithoutHouseInput = {
    where: HouseUserWhereUniqueInput
    create: XOR<HouseUserCreateWithoutHouseInput, HouseUserUncheckedCreateWithoutHouseInput>
  }

  export type HouseUserCreateManyHouseInputEnvelope = {
    data: Enumerable<HouseUserCreateManyHouseInput>
    skipDuplicates?: boolean
  }

  export type ChoreUpsertWithWhereUniqueWithoutHouseInput = {
    where: ChoreWhereUniqueInput
    update: XOR<ChoreUpdateWithoutHouseInput, ChoreUncheckedUpdateWithoutHouseInput>
    create: XOR<ChoreCreateWithoutHouseInput, ChoreUncheckedCreateWithoutHouseInput>
  }

  export type ChoreUpdateWithWhereUniqueWithoutHouseInput = {
    where: ChoreWhereUniqueInput
    data: XOR<ChoreUpdateWithoutHouseInput, ChoreUncheckedUpdateWithoutHouseInput>
  }

  export type ChoreUpdateManyWithWhereWithoutHouseInput = {
    where: ChoreScalarWhereInput
    data: XOR<ChoreUpdateManyMutationInput, ChoreUncheckedUpdateManyWithoutChoresInput>
  }

  export type UserUpsertWithoutHousesOwnedInput = {
    update: XOR<UserUpdateWithoutHousesOwnedInput, UserUncheckedUpdateWithoutHousesOwnedInput>
    create: XOR<UserCreateWithoutHousesOwnedInput, UserUncheckedCreateWithoutHousesOwnedInput>
  }

  export type UserUpdateWithoutHousesOwnedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    chores?: ChoreUpdateManyWithoutUserNestedInput
    houses?: HouseUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHousesOwnedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    chores?: ChoreUncheckedUpdateManyWithoutUserNestedInput
    houses?: HouseUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HouseUserUpsertWithWhereUniqueWithoutHouseInput = {
    where: HouseUserWhereUniqueInput
    update: XOR<HouseUserUpdateWithoutHouseInput, HouseUserUncheckedUpdateWithoutHouseInput>
    create: XOR<HouseUserCreateWithoutHouseInput, HouseUserUncheckedCreateWithoutHouseInput>
  }

  export type HouseUserUpdateWithWhereUniqueWithoutHouseInput = {
    where: HouseUserWhereUniqueInput
    data: XOR<HouseUserUpdateWithoutHouseInput, HouseUserUncheckedUpdateWithoutHouseInput>
  }

  export type HouseUserUpdateManyWithWhereWithoutHouseInput = {
    where: HouseUserScalarWhereInput
    data: XOR<HouseUserUpdateManyMutationInput, HouseUserUncheckedUpdateManyWithoutUsersInput>
  }

  export type HouseCreateWithoutUsersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    chores?: ChoreCreateNestedManyWithoutHouseInput
    houseOwner?: UserCreateNestedOneWithoutHousesOwnedInput
  }

  export type HouseUncheckedCreateWithoutUsersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    id?: number
    ownerId?: string | null
    chores?: ChoreUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutUsersInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutUsersInput, HouseUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutHousesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
    chores?: ChoreCreateNestedManyWithoutUserInput
    housesOwned?: HouseCreateNestedManyWithoutHouseOwnerInput
  }

  export type UserUncheckedCreateWithoutHousesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
    chores?: ChoreUncheckedCreateNestedManyWithoutUserInput
    housesOwned?: HouseUncheckedCreateNestedManyWithoutHouseOwnerInput
  }

  export type UserCreateOrConnectWithoutHousesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHousesInput, UserUncheckedCreateWithoutHousesInput>
  }

  export type HouseUpsertWithoutUsersInput = {
    update: XOR<HouseUpdateWithoutUsersInput, HouseUncheckedUpdateWithoutUsersInput>
    create: XOR<HouseCreateWithoutUsersInput, HouseUncheckedCreateWithoutUsersInput>
  }

  export type HouseUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    chores?: ChoreUpdateManyWithoutHouseNestedInput
    houseOwner?: UserUpdateOneWithoutHousesOwnedNestedInput
  }

  export type HouseUncheckedUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    chores?: ChoreUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type UserUpsertWithoutHousesInput = {
    update: XOR<UserUpdateWithoutHousesInput, UserUncheckedUpdateWithoutHousesInput>
    create: XOR<UserCreateWithoutHousesInput, UserUncheckedCreateWithoutHousesInput>
  }

  export type UserUpdateWithoutHousesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    chores?: ChoreUpdateManyWithoutUserNestedInput
    housesOwned?: HouseUpdateManyWithoutHouseOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutHousesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    chores?: ChoreUncheckedUpdateManyWithoutUserNestedInput
    housesOwned?: HouseUncheckedUpdateManyWithoutHouseOwnerNestedInput
  }

  export type HouseCreateWithoutChoresInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    houseOwner?: UserCreateNestedOneWithoutHousesOwnedInput
    users?: HouseUserCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutChoresInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    id?: number
    ownerId?: string | null
    users?: HouseUserUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutChoresInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutChoresInput, HouseUncheckedCreateWithoutChoresInput>
  }

  export type UserCreateWithoutChoresInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
    housesOwned?: HouseCreateNestedManyWithoutHouseOwnerInput
    houses?: HouseUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChoresInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    id?: string
    password: string
    username: string
    token?: string | null
    housesOwned?: HouseUncheckedCreateNestedManyWithoutHouseOwnerInput
    houses?: HouseUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChoresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChoresInput, UserUncheckedCreateWithoutChoresInput>
  }

  export type HouseUpsertWithoutChoresInput = {
    update: XOR<HouseUpdateWithoutChoresInput, HouseUncheckedUpdateWithoutChoresInput>
    create: XOR<HouseCreateWithoutChoresInput, HouseUncheckedCreateWithoutChoresInput>
  }

  export type HouseUpdateWithoutChoresInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    houseOwner?: UserUpdateOneWithoutHousesOwnedNestedInput
    users?: HouseUserUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutChoresInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: HouseUserUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type UserUpsertWithoutChoresInput = {
    update: XOR<UserUpdateWithoutChoresInput, UserUncheckedUpdateWithoutChoresInput>
    create: XOR<UserCreateWithoutChoresInput, UserUncheckedCreateWithoutChoresInput>
  }

  export type UserUpdateWithoutChoresInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    housesOwned?: HouseUpdateManyWithoutHouseOwnerNestedInput
    houses?: HouseUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChoresInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    housesOwned?: HouseUncheckedUpdateManyWithoutHouseOwnerNestedInput
    houses?: HouseUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChoreCreateManyUserInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    houseId?: number | null
  }

  export type HouseCreateManyHouseOwnerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    houseName: string
    id?: number
  }

  export type HouseUserCreateManyUserInput = {
    houseId: number
    id?: number
  }

  export type ChoreUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    house?: HouseUpdateOneWithoutChoresNestedInput
  }

  export type ChoreUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    houseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChoreUncheckedUpdateManyWithoutChoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    houseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HouseUpdateWithoutHouseOwnerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    chores?: ChoreUpdateManyWithoutHouseNestedInput
    users?: HouseUserUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutHouseOwnerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    chores?: ChoreUncheckedUpdateManyWithoutHouseNestedInput
    users?: HouseUserUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateManyWithoutHousesOwnedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    houseName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type HouseUserUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    house?: HouseUpdateOneRequiredWithoutUsersNestedInput
  }

  export type HouseUserUncheckedUpdateWithoutUserInput = {
    houseId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type HouseUserUncheckedUpdateManyWithoutHousesInput = {
    houseId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ChoreCreateManyHouseInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    time?: Date | string | null
    userId?: string | null
  }

  export type HouseUserCreateManyHouseInput = {
    userId: string
    id?: number
  }

  export type ChoreUpdateWithoutHouseInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutChoresNestedInput
  }

  export type ChoreUncheckedUpdateWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HouseUserUpdateWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutHousesNestedInput
  }

  export type HouseUserUncheckedUpdateWithoutHouseInput = {
    userId?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type HouseUserUncheckedUpdateManyWithoutUsersInput = {
    userId?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}